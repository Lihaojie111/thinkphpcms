<?phpfunction dd($a){    dump($a);exit;}/** * 来源 http://blog.csdn.net/tf198910/article/details/44957917 * 多个数组的笛卡尔积 * * @param unknown_type $data */function combineDika() {    $data = func_get_args();    $data = current($data);    $cnt = count($data);    $result = array();    $arr1 = array_shift($data);    foreach($arr1 as $key=>$item)    {        $result[] = array($item);    }    foreach($data as $key=>$item)    {        $result = combineArray($result,$item);    }    return $result;}/** * 两个数组的笛卡尔积 * @param unknown_type $arr1 * @param unknown_type $arr2 */function combineArray($arr1,$arr2) {    $result = array();    foreach ($arr1 as $item1)    {        foreach ($arr2 as $item2)        {            $temp = $item1;            $temp[] = $item2;            $result[] = $temp;        }    }    return $result;}/** * 隐藏真实名称  首+'***'+尾 */function hide_name($str){    $first = mb_substr($str,0,1);    $last = mb_substr($str,-1,1);    return $first.'****'.$last;}/** * 验证码校验 * @param unknown_type $code * @param unknown_type $id */function check_verify($code, $id = ''){	$verify = new \Think\Verify();	return $verify->check($code, $id);}/** * 短信校验 * @param unknown_type $code * @param unknown_type $id */function check_sms($code, $id = ''){	$res1 = D('MemberSms')->get_item(array('session_id'=>session_id(),'code'=>$code,'publish_time'=>array('gt',NOW_TIME-60)),0);	if(!$res1){		return false;	}else{		return true;	}}/** * 文件大小转换 * @param unknown_type $size * @return 文件大小  如 44KB */function format_bytes($size) {	$units = array('B', 'KB', 'MB', 'G', 'T');	for ($i = 0; $size >= 1024 && $i < 4; $i++) $size /= 1024;	return round($size, 2).$units[$i];}/** * 过滤html标签 * @param unknown_type $str * @param unknown_type $tags * @return unknown */function strip_html($str,$tags = 'script,object,style'){	$str = htmlspecialchars_decode($str);	$tags = explode(',',$tags);	foreach($tags as &$val){		$str=preg_replace("/<(".$val.".*?)>(.*?)<(\/".$val.".*?)>/si","",$str);	}	return $str;}/** * 截取摘要 * @param unknown_type $str * @param unknown_type $start * @param unknown_type $length */function substring($str,$start,$length){	$str = preg_replace("/(\s|\&nbsp\;|　|\xc2\xa0)/","",$str);	$str = htmlspecialchars_decode($str);	$str_old = strip_tags($str);	$str_new = mb_substr($str,$start,$length,'utf-8');	if($str_old == $str_new){		return $str_old;	}else{		return $str_new.'...';	}	}/** * 对查询结果集进行排序 * @access public * @param array $list 查询结果 * @param string $field 排序的字段名 * @param array $sortby 排序类型 * asc正向排序 desc逆向排序 nat自然排序 * @return array */function list_sort_by($list,$field, $sortby='asc') {	if(is_array($list)){		$refer = $resultSet = array();		foreach ($list as $i => $data)			$refer[$i] = &$data[$field];		switch ($sortby) {			case 'asc': // 正向排序				asort($refer);				break;			case 'desc':// 逆向排序				arsort($refer);				break;			case 'nat': // 自然排序				natcasesort($refer);				break;		}		foreach ( $refer as $key=> $val)			$resultSet[] = &$list[$key];		return $resultSet;	}	return false;}/** * 将会员信息生成签名 * @param array [id,用户名] * @return string 加密后的字符串 * @author zjf */function auth2code($data) {	//数据类型检测	if(!is_array($data)){		$data = (array)$data;	}	$code = http_build_query($data).C('AUTH_SIGN'); //url编码并生成query字符串	$sign = sha1($code); //生成签名	return $sign;}/** * 将资源转化成另外命名，用于生成多规格图片 * @param unknown_type $path  资源路径 * @param unknown_type $fix  添加的后缀 */function img_rename($path, $fix) {	if($path){		preg_match('/(.*)\.(.*)/', $path ,$a);		return $a[1].$fix.'.'.$a[2];	}else{		return '';	}}/** * 系统邮件发送函数 * @param string $to    接收邮件者邮箱 * @param string $name  接收邮件者名称 * @param string $subject 邮件主题 * @param string $body    邮件内容 * @param string $attachment 附件列表 * @return boolean */function think_send_mail($to, $name, $subject = '', $body = '', $attachment = null){	$config = C('THINK_EMAIL');	Vendor('PHPMailer','','.class.php');	$mail = new PHPMailer();	$mail->CharSet    = 'UTF-8'; //设定邮件编码，默认ISO-8859-1，如果发中文此项必须设置，否则乱码	$mail->IsSMTP();  // 设定使用SMTP服务	$mail->SMTPDebug  = 0;                     // 关闭SMTP调试功能	// 1 = errors and messages	// 2 = messages only	$mail->SMTPAuth   = true;                  // 启用 SMTP 验证功能	$mail->SMTPSecure = 'ssl';                 // 使用安全协议	$mail->Host       = $config['SMTP_HOST'];  // SMTP 服务器	$mail->Port       = $config['SMTP_PORT'];  // SMTP服务器的端口号	$mail->Username   = $config['SMTP_USER'];  // SMTP服务器用户名	$mail->Password   = $config['SMTP_PASS'];  // SMTP服务器密码	$mail->SetFrom($config['FROM_EMAIL'], $config['FROM_NAME']);	$replyEmail       = $config['REPLY_EMAIL']?$config['REPLY_EMAIL']:$config['FROM_EMAIL'];	$replyName        = $config['REPLY_NAME']?$config['REPLY_NAME']:$config['FROM_NAME'];	$mail->AddReplyTo($replyEmail, $replyName);	$mail->Subject    = $subject;	$mail->MsgHTML($body);	if(is_array($to))	{		foreach($to as $val)		{			$mail->AddAddress($val, $name);		}	}else	{		$mail->AddAddress($to, $name);	}	if(is_array($attachment)){ // 添加附件		foreach ($attachment as $file){			is_file($file) && $mail->AddAttachment($file);		}	}	return $mail->Send() ? true : $mail->ErrorInfo;}/** * 判断是否为合法手机格式 * @param unknown_type $str */function is_mobile($str){	$res = preg_match("/^1[34578]\d{9}$/", $str);	if(!$res){		return false;	}else{		return true;	}}/** * 数字格式化，每三位加逗号 * @param unknown_type $num * @return boolean|Ambigous <string, multitype:> */function num_format($num){	if($num == 0){		return "0.00";	}	if($num<1){		return $num;	}	if(!is_numeric($num)){		return false;	}	$rvalue='';	$num = explode('.',$num);//把整数和小数分开	$rl = !isset($num['1']) ? '' : $num['1'];//小数部分的值	$j = strlen($num[0]) % 3;//整数有多少位	$sl = substr($num[0], 0, $j);//前面不满三位的数取出来	$sr = substr($num[0], $j);//后面的满三位的数取出来	$i = 0;	while($i <= strlen($sr)){		$rvalue = $rvalue.','.substr($sr, $i, 3);//三位三位取出再合并，按逗号隔开		$i = $i + 3;	}	$rvalue = $sl.$rvalue;	$rvalue = substr($rvalue,0,strlen($rvalue)-1);//去掉最后一个逗号	$rvalue = explode(',',$rvalue);//分解成数组	if($rvalue[0]==0){		array_shift($rvalue);//如果第一个元素为0，删除第一个元素	}	$rv = $rvalue[0];//前面不满三位的数	for($i = 1; $i < count($rvalue); $i++){		$rv = $rv.','.$rvalue[$i];	}	if(!empty($rl)){		$rvalue = $rv.'.'.$rl;//小数不为空，整数和小数合并	}else{		$rvalue = $rv;//小数为空，只有整数	}	return $rvalue;}/** * 系统加密方法 * @param string $data 要加密的字符串 * @param string $key  加密密钥 * @param int $expire  过期时间 单位 秒 * @return string * @author 麦当苗儿 <zuojiazi@vip.qq.com> */function think_encrypt($data, $key = '', $expire=0) {	$key  = md5(empty($key) ? C('DATA_AUTH_KEY') : $key);	$data = base64_encode($data);	$x    = 0;	$len  = strlen($data);	$l    = strlen($key);	$char = '';	for ($i = 0; $i < $len; $i++) {		if ($x == $l) $x = 0;		$char .= substr($key, $x, 1);		$x++;	}	$str = sprintf('%010d', $expire ? $expire + time():0);	for ($i = 0; $i < $len; $i++) {		$str .= chr(ord(substr($data, $i, 1)) + (ord(substr($char, $i, 1)))%256);	}	return strrev(str_replace(array('+','/','='),array('-','_',''),base64_encode($str)));}/** * 系统解密方法 * @param  string $data 要解密的字符串 （必须是think_encrypt方法加密的字符串） * @param  string $key  加密密钥 * @return string * @author 麦当苗儿 <zuojiazi@vip.qq.com> */function think_decrypt($data, $key = ''){	$key    = md5(empty($key) ? C('DATA_AUTH_KEY') : $key);	$data   = str_replace(array('-','_'),array('+','/'),strrev($data));	$mod4   = strlen($data) % 4;	if ($mod4) {		$data .= substr('====', $mod4);	}	$data   = base64_decode($data);	$expire = substr($data,0,10);	$data   = substr($data,10);	if($expire > 0 && $expire < time()) {		return '';	}	$x      = 0;	$len    = strlen($data);	$l      = strlen($key);	$char   = $str = '';	for ($i = 0; $i < $len; $i++) {		if ($x == $l) $x = 0;		$char .= substr($key, $x, 1);		$x++;	}	for ($i = 0; $i < $len; $i++) {		if (ord(substr($data, $i, 1))<ord(substr($char, $i, 1))) {			$str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));		}else{			$str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));		}	}	return base64_decode($str);}/** * 数组加密方法 * @param array $data 要加密的字符 * @param string $key  加密密钥 * @param int $expire  过期时间 单位 秒 * @return string * @author 麦当苗儿 <zuojiazi@vip.qq.com> */function array_encode($data, $key = '', $expire = 0){	$data = json_encode($data);	return think_encrypt($data,$key,$expire);}/** * 系统解密方法 * @param array $data 要加密的字符 * @param string $key  加密密钥 * @param int $expire  过期时间 单位 秒 * @return string * @author 麦当苗儿 <zuojiazi@vip.qq.com> */function array_decode($data, $key = ''){	$data = think_decrypt($data,$key);	return json_decode($data,true);}/** * * 发送HTTP请求方法，目前只支持CURL发送请求 * @param string $url请求URL * @param array $params请求参数 * @param string $method请求方法GET/POST * @return array $data 响应数据 * */function http($url, $params = null, $method = 'GET', $header = array(), $multi = false) {	$opts = array (			CURLOPT_TIMEOUT => 30,			CURLOPT_RETURNTRANSFER => 1,			CURLOPT_SSL_VERIFYPEER => false,			CURLOPT_SSL_VERIFYHOST => false,			CURLOPT_HTTPHEADER => $header	)	;	/* 根据请求类型设置特定参数 */	switch (strtoupper ( $method )) {		case 'GET' :		    if ($params) {                $opts [CURLOPT_URL] = $url . '?' . http_build_query ( $params );            } else {                $opts [CURLOPT_URL] = $url;            }			break;		case 'POST' :			// 判断是否传输文件			$params = $multi ? $params : http_build_query ( $params );			$opts [CURLOPT_URL] = $url;			$opts [CURLOPT_POST] = 1;			$opts [CURLOPT_POSTFIELDS] = $params;			break;		default :			exit ( '不支持的请求方式！' );	}	/* 初始化并执行curl请求 */	$ch = curl_init();	curl_setopt_array ( $ch, $opts );	$data = curl_exec ( $ch );	$error = curl_error ( $ch );	curl_close ( $ch );	if ($error)		exit ( '请求发生错误：' . $error );	return $data;}/** +---------------------------------------------------------- * 生成随机字符串 +---------------------------------------------------------- * @param int       $length  要生成的随机字符串长度 * @param string    $type    随机码类型：0，数字+大小写字母；1，数字；2，小写字母；3，大写字母；4，特殊字符；-1，数字+大小写字母+特殊字符 +---------------------------------------------------------- * @return string +---------------------------------------------------------- */function randCode($length = 5, $type = 0) {	$arr = array(1 => "0123456789", 2 => "abcdefghijklmnopqrstuvwxyz", 3 => "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 4 => "~@#$%^&*(){}[]|");	if ($type == 0) {		array_pop($arr);		$string = implode("", $arr);	} elseif ($type == "-1") {		$string = implode("", $arr);	} else {		$string = $arr[$type];	}	$count = strlen($string) - 1;	$code = '';	for ($i = 0; $i < $length; $i++) {		$code .= $string[rand(0, $count)];	}	return $code;}/** * excel导出--订单导出 * @param $expTitle * @param $expCellName * @param $expTableData */function exportExcel($expTitle,$expCellName,$expTableData){	$xlsTitle = iconv('gb2312', 'utf-8', $expTitle);//文件名称	$fileName = $_SESSION['loginAccount'].date('YmdHis');//or $xlsTitle 文件名称可根据自己情况设定	$cellNum = count($expCellName);	$dataNum = count($expTableData);	import("Vendor.PHPExcel.PHPExcel");	$objPHPExcel = new PHPExcel();	$cellName = array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','AB','AC','AD','AE','AF','AG','AH','AI','AJ','AK','AL','AM','AN','AO','AP','AQ','AR','AS','AT','AU','AV','AW','AX','AY','AZ');	$objPHPExcel->getActiveSheet(0)->mergeCells('A1:'.$cellName[$cellNum-1].'1');//合并单元格	$objPHPExcel->setActiveSheetIndex(0)->setCellValue('A1', $expTitle.'  Export time:'.date('Y-m-d H:i:s'));	for($i=0;$i<$cellNum;$i++){		$objPHPExcel->setActiveSheetIndex(0)->setCellValue($cellName[$i].'2', $expCellName[$i][1]);	}	// Miscellaneous glyphs, UTF-8	for($i=0;$i<$dataNum;$i++){		for($j=0;$j<$cellNum;$j++){			$objPHPExcel->getActiveSheet(0)->setCellValue($cellName[$j].($i+3), $expTableData[$i][$expCellName[$j][0]]);		}	}	ob_end_clean();	header('pragma:public');	header('Content-type:application/vnd.ms-excel;charset=utf-8;name="'.$xlsTitle.'.xls"');	header("Content-Disposition:attachment;filename=$fileName.xls");//attachment新窗口打印inline本窗口打印	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');	$objWriter->save('php://output');	exit;}/** * 获取当前访问的完整URL地址 * @return string */function GetNowUrl() {    $url = 'http://';    if (isset ( $_SERVER ['HTTPS'] ) && $_SERVER ['HTTPS'] == 'on') {        $url = 'https://';    }    if ($_SERVER ['SERVER_PORT'] != '80') {        $url .= $_SERVER ['HTTP_HOST'] . ':' . $_SERVER ['SERVER_PORT'] . $_SERVER ['REQUEST_URI'];    } else {        $url .= $_SERVER ['HTTP_HOST'] . $_SERVER ['REQUEST_URI'];    }    // 兼容后面的参数组装    if (stripos ( $url, '?' ) === false) {        $url .= '?t=' . time ();    }    return $url;}/** * 获取openid * session中没有，通过网页获取openid 并保存至session中 * 4/16 * @return Ambigous <mixed, NULL, unknown, Ambigous, unknown> */function get_openid() {    /*if(!isWeChat()) {        $oepnid = M('User')->where(array('id'=>1))->getField('openid');        session('openid', $oepnid);    }*/	if(strlen(session("openid"))<3){		$openid = auth_openid();		session("openid",$openid);	}else{		$openid = session("openid");	}	return $openid;}/** * 网页认证方式获取openid * 4/16 * @return Ambigous <mixed, unknown> */function auth_openid(){	$WxApi = new Common\Lib\LibWeixin();	if (!isset($_GET['code'])) {		$url = $WxApi->createOauthUrlForCode();		exit(header("Location: $url"));	} else {		//获取code码，以获取openid		$code = I("get.code");		$openid = $WxApi->getOpenidByOauth($code);		return $openid;	}}function wx_short_url($url) {    $uri = 'https://api.weixin.qq.com/cgi-bin/shorturl?access_token='.get_access_token();    $arr = array (        'action' => 'long2short',        'long_url' => $url    );    $data = json_encode($arr);    $res = vpost($uri,$data);    $data = json_decode($res,true);    return $data['short_url'];}function get_access_token() {    $WxApi = new Common\Lib\LibWeixin();    return $WxApi->get_access_token();}function wx_info($openid) {    $WxApi = new Common\Lib\LibWeixin();    return $WxApi->get_user_info($openid);}function checkstr($str, $find){    $tmp_array = explode($find, $str);    if(count($tmp_array)>1){        return true;    } else{        return false;    }}function vpost($url, $data) { // 模拟提交数据函数    $curl = curl_init(); // 启动一个CURL会话    curl_setopt($curl, CURLOPT_URL, $url); // 要访问的地址    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0); // 对认证证书来源的检查    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 1); // 从证书中检查SSL加密算法是否存在    curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); // 模拟用户使用的浏览器    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); // 使用自动跳转    curl_setopt($curl, CURLOPT_AUTOREFERER, 1); // 自动设置Referer    curl_setopt($curl, CURLOPT_POST, 1); // 发送一个常规的Post请求    curl_setopt($curl, CURLOPT_POSTFIELDS, $data); // Post提交的数据包    curl_setopt($curl, CURLOPT_TIMEOUT, 30); // 设置超时限制防止死循环    curl_setopt($curl, CURLOPT_HEADER, 0); // 显示返回的Header区域内容    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); // 获取的信息以文件流的形式返回    $tmpInfo = curl_exec($curl); // 执行操作    if (curl_errno($curl)) {        echo 'Errno'.curl_error($curl);//捕抓异常    }    curl_close($curl); // 关闭CURL会话    return $tmpInfo; // 返回数据}function vget($url) {    $curl = curl_init(); // 启动一个CURL会话    curl_setopt($curl, CURLOPT_URL, $url); // 要访问的地址    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0); // 对认证证书来源的检查    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 1); // 从证书中检查SSL加密算法是否存在    curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); // 模拟用户使用的浏览器    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); // 使用自动跳转    curl_setopt($curl, CURLOPT_AUTOREFERER, 1); // 自动设置Referer    curl_setopt($curl, CURLOPT_TIMEOUT, 30); // 设置超时限制防止死循环    curl_setopt($curl, CURLOPT_HEADER, 0); // 显示返回的Header区域内容    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); // 获取的信息以文件流的形式返回    $tmpInfo = curl_exec($curl); // 执行操作    if (curl_errno($curl)) {        echo 'Errno'.curl_error($curl);//捕抓异常    }    curl_close($curl); // 关闭CURL会话    return $tmpInfo; // 返回数据}function getWeek($time) {	$week = date("w",$time);	switch($week){		case 1:			return "星期一";			break;		case 2:			return "星期二";			break;		case 3:			return "星期三";			break;		case 4:			return "星期四";			break;		case 5:			return "星期五";			break;		case 6:			return "星期六";			break;		case 0:			return "星期日";			break;	}}/** * 友好的时间显示 * * @param int    $sTime 待显示的时间 * @param string $type  类型. normal | mohu | full | ymd | other * @param string $alt   已失效 * @return string */function friendlyDate($sTime,$type = 'normal',$alt = 'false') {	if (!$sTime)		return '';	//sTime=源时间，cTime=当前时间，dTime=时间差	$cTime      =   time();	$dTime      =   $cTime - $sTime;	$dDay       =   intval(date("z",$cTime)) - intval(date("z",$sTime));	//$dDay     =   intval($dTime/3600/24);	$dYear      =   intval(date("Y",$cTime)) - intval(date("Y",$sTime));	//normal：n秒前，n分钟前，n小时前，日期	if($type=='normal'){		if( $dTime < 60 ){			if($dTime < 10){				return '刚刚';    //by yangjs			}else{				return intval(floor($dTime / 10) * 10)."秒前";			}		}elseif( $dTime < 3600 ){			return intval($dTime/60)."分钟前";			//今天的数据.年份相同.日期相同.		}elseif( $dYear==0 && $dDay == 0  ){			//return intval($dTime/3600)."小时前";			return '今天'.date('H:i',$sTime);		}elseif($dYear==0){			return date("m月d日 H:i",$sTime);		}else{			return date("Y-m-d H:i",$sTime);		}	}elseif($type=='mohu'){		if( $dTime < 60 ){			return $dTime."秒前";		}elseif( $dTime < 3600 ){			return intval($dTime/60)."分钟前";		}elseif( $dTime >= 3600 && $dDay == 0  ){			return intval($dTime/3600)."小时前";		}elseif( $dDay > 0 && $dDay<=7 ){			return intval($dDay)."天前";		}elseif( $dDay > 7 &&  $dDay <= 30 ){			return intval($dDay/7) . '周前';		}elseif( $dDay > 30 ){			return intval($dDay/30) . '个月前';		}		//full: Y-m-d , H:i:s	}elseif($type=='full'){		return date("Y-m-d , H:i:s",$sTime);	}elseif($type=='ymd'){		return date("Y-m-d",$sTime);	}else{		if( $dTime < 60 ){			return $dTime."秒前";		}elseif( $dTime < 3600 ){			return intval($dTime/60)."分钟前";		}elseif( $dTime >= 3600 && $dDay == 0  ){			return intval($dTime/3600)."小时前";		}elseif($dYear==0){			return date("Y-m-d H:i:s",$sTime);		}else{			return date("Y-m-d H:i:s",$sTime);		}	}}/** * 是否为邮箱格式 * @param unknown $arr * @return string */function is_email($email){	return preg_match('/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/',$email)===1;}function jsonImg($data) {    $tmp = json_decode($data, true);    return $tmp[0];}function url($url) {    if(checkstr($url, 'http')) {        return $url;    } else {        return U($url);    }}/** * 可以统计中文字符串长度的函数 * @param $str 要计算长度的字符串 * */function abslength($str) {	if(empty($str)){		return 0;	}	if(function_exists('mb_strlen')){		return mb_strlen($str,'utf-8');	} else {		preg_match_all("/./u", $str, $ar);		return count($ar[0]);	}}/* * 获取快递拼音-汉字映射 * return 快递汉字 @param string $find 快递拼音 * return 获取映射 @param empty $find * */function get_deliver_data($find = '') {    $p = explode(',','YTO,YD,STO,SF,ZTO,AJ,ANE,AXD,BQXHM,BFDF,BTWL,CCES,CITY100,COE,CSCY,DBL,DSWL,DTWL,EMS,FAST,FEDEX,FEDEX_GJ,FKD,GDEMS,GSD,GTO,GTSD,HFWL,HHTT,HLWL,HOAU,hq568,HTKY,HXLWL,HYLSD,JGSD,JIUYE,JJKY,JLDT,JTKD,JXD,JYKD,JYM,JYWL,KYWL,LB,LHT,MHKD,MLWL,NEDA,PADTF,QCKD,QFKD,QRT,RFD,SAD,SAWL,SBWL,SDWL,SFWL,SHWL,ST,STWL,SURE,TSSTO,UAPEX,UC,WJWL,WXWL,XBWL,XFEX,XYT,XJ,YADEX,YCWL,YDH,YFEX,YFHEX,YFSD,YTKD,YXKD,YZPY,ZENY,ZHQKD,ZJS,ZTE,ZTKY,ZTWL,ZYWL,AMAZON,SUBIDA,RFEX,QUICK,CJKD,CNPEX,HOTSCM,HPTEX,AYCA,PANEX,PCA,UEQ');    $h = explode(',', '圆通速递,韵达快递,申通快递,顺丰快递,中通速递,安捷快递,安能物流,安信达快递,北青小红帽,百福东方,百世快运,CCES快递,城市100,COE东方快递,长沙创一,德邦,D速物流,大田物流,EMS,快捷速递,FEDEX联邦(国内件）,FEDEX联邦(国际件）,飞康达,广东邮政,共速达,国通快递,高铁速递,汇丰物流,天天快递,恒路物流,天地华宇,华强物流,百世快递,华夏龙物流,好来运快递,京广速递,九曳供应链,佳吉快运,嘉里物流,捷特快递,急先达,晋越快递,加运美,佳怡物流,跨越物流,龙邦快递,联昊通速递,民航快递,明亮物流,能达速递,平安达腾飞快递,全晨快递,全峰快递,全日通快递,如风达,赛澳递,圣安物流,盛邦物流,上大物流,盛丰物流,盛辉物流,速通物流,速腾快递,速尔快递,唐山申通,全一快递,优速快递,万家物流,万象物流,新邦物流,信丰快递,希优特,新杰物流,源安达快递,远成物流,义达国际物流,越丰物流,原飞航物流,亚风快递,运通快递,亿翔快递,邮政平邮/小包,增益快递,汇强快递,宅急送,众通快递,中铁快运,中铁物流,中邮物流,亚马逊物流,速必达物流,瑞丰速递,快客快递,城际快递,CNPEX中邮快递,鸿桥供应链,海派通物流公司,澳邮专线,泛捷快递,PCA Express,UEQ Express');    if($find) {        foreach($p as $key=>$val) {            if($val == $find) {                break;            }        }        return $h[$key];    }    if(false === $arr = S('deliver_data')) {        foreach($p as $key=>$val) {            $arr[] = array(0=>$val , 1=>$h[$key]);        }        S('deliver_data', $arr);    }    return $arr;} /** *  post提交数据 * @param  string $url 请求Url * @param  array $datas 提交的数据 * @return url响应返回的html */function sendPost($url, $datas) {	$temps = array();	foreach ($datas as $key => $value) {		$temps[] = sprintf('%s=%s', $key, $value);	}	$post_data = implode('&', $temps);	$url_info = parse_url($url);	if(!isset($url_info['port']))	{		$url_info['port']=80;	}	//echo $url_info['port'];	$httpheader = "POST " . $url_info['path'] . " HTTP/1.0\r\n";	$httpheader.= "Host:" . $url_info['host'] . "\r\n";	$httpheader.= "Content-Type:application/x-www-form-urlencoded\r\n";	$httpheader.= "Content-Length:" . strlen($post_data) . "\r\n";	$httpheader.= "Connection:close\r\n\r\n";	$httpheader.= $post_data;	$fd = fsockopen($url_info['host'], $url_info['port']);	fwrite($fd, $httpheader);	$gets = "";	$headerFlag = true;	while (!feof($fd)) {		if (($header = @fgets($fd)) && ($header == "\r\n" || $header == "\n")) {			break;		}	}	while (!feof($fd)) {		$gets.= fread($fd, 128);	}	fclose($fd);	return $gets;}function deldir($dir, $del_dir = false) {    if (is_array($dir)) {        foreach ($dir as $subPath)            deldir($subPath, $del_dir);    }    if(is_dir($dir)) {        //先删除目录下的文件：        $dh = opendir($dir);        while ($file = readdir($dh)) {            if($file != '.' && $file != '..') {                $fullpath = $dir.'/'.$file;                if(!is_dir($fullpath)) {                    unlink($fullpath);                } else {                    deldir($fullpath);                }            }        }        closedir($dh);        //删否当前文件夹：        if($del_dir) {            return rmdir($dir);        }        return true;    } else {        if (file_exists($dir)) {            return unlink($dir);        } else {            //假装清除成功            return true;        }    }}function clean_array($array = array()) {    $tmp = array();    foreach ($array as $item) {        if(!empty($item)) {            $tmp[] = $item;        }    }    return $tmp;}/*function get_target_value($array=array(), $target_key='998', $target_value='value') {    foreach ($array as $val) {        if($val['key'] == $target_key) {            $final = $val[$target_value];            break;        }    }    return $final;}*//* * 获取数组目标值 * @param [] $array 目标数组 * @param unknown $value 目标值 * @param string $target_key 比对值key名 * @param string $target_value_key 目标值key名 * */function get_target_value($array = [], $value, $target_key = 'key', $target_value_key = 'value', $is_return_the_arr_key = false, $default_res = '--'){    $result = $default_res;    foreach ($array as $key => $val) {        if ($val[$target_key] == $value) {            $result = $val[$target_value_key];            break;        }    }    return $is_return_the_arr_key ? $key : $result;}function get_attach($global_attach, $attach_id) {    return $global_attach[$attach_id];}function isWeChat() {    $user_agent = $_SERVER['HTTP_USER_AGENT'];    if (stripos($user_agent, 'MicroMessenger') !== false) {        return true;    } else {        return false;    }}/* * 获取介格区间 * @param mix $mainattr * return string 2~100 * */function get_price_section($mainattr) {    $data = is_array($mainattr) ? $mainattr : json_decode($mainattr, true);    foreach ($data as $type) {        foreach ($type['data'] as $val) {            $max = isset($max) ? $max : $val['type_coupon_price'];            $max = $max < $val['type_coupon_price'] ? $val['type_coupon_price'] : $max;            $min = isset($min) ? $min : $val['type_coupon_price'];            $min = $min > $val['type_coupon_price'] ? $val['type_coupon_price'] : $min;        }    }    if($max == $min) {        return '￥'.$min;    }    return '￥'.$min.'~￥'.$max;}/* * 获取总库存(同时可用来获取json串相应字段的总和) * @param mix $mainattr * @param string $field * @return int  * */function get_total_inventory($mainattr, $field = 'inventory') {    $data = is_array($mainattr) ? $mainattr : json_decode($mainattr, true);    $total_inventory = 0;    foreach ($data as $type) {        foreach ($type['data'] as $val) {            $total_inventory += $val[$field];        }    }    return $total_inventory;}function rg_print($data, $die = true){	header("Content-type:text/html;charset=utf-8");	echo '<pre>';	print_r($data);	$die && die;}/** * 将$array按$str出现的id顺序重新排序 * @param $str   排序ids   如："1,2,7,4,3" * @param $array  排序数组 * @return array */function array_sortby_str($str,$array){	$ids_arr = explode(',',$str);	$new_arr = array();	for($i = 0;$i < count($ids_arr);$i++){		foreach($array as $k => $v){			if($v['id'] == $ids_arr[$i]){				array_push($new_arr,$v);			}		}	}	return $new_arr;}/** *split进行分词 *@create 2015-1-13 *@author zjf */function split_words($str){	$pa = new \Vendor\phpanalysis\phpanalysis();	$pa->SetSource($str);	//设置分词属性	$pa->resultType = 2;	$pa->differMax  = true;	$pa->differFreq = true;	$pa->StartAnalysis();	//获取你想要的结果	$b = $pa->GetFinallyResult(',');	$key=trim($b,',');	return $key?$key:'';}/** * 价格四舍五入2位小数 * @param $number *//*function money_format($number){	return number_format($number, 2, '.', '');}*//** * html文章转化成wxml */function html2wxml($content){	$image = new \Think\Image();	$_arr = preg_split('/(<img.*?>)/i', $content, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);  	$_r = array();  	foreach($_arr as $_txt) {  		if(substr($_txt, 0, 4) == '<img') {  			$_matchs = array();  			preg_match('/<img.*?src="(.*?)"/i', $_txt, $_matchs);  			$_txt = $_matchs[1];  			if(preg_match('/^\//', $_txt)) $_txt = $gupload.$_txt;			$image->open('.'.$_txt);			$_r[]= array('type'=>'img', 'data'=>$_txt,'width'=>$image->width(),'height'=>$image->height());		}else {  			$_txt = preg_replace('/&.*?;/', ' ', $_txt);  			$_txt = preg_replace('/\s+/', ' ', $_txt);  			$_txt = preg_replace(array('/<br.*?>/i', '/<p.*?>/i', '/<li.*?>/i', '/<span.*?>/i', '/<div.*?>/i', '/<tr.*?>/i', '/<th.*?>/i'), "\n", $_txt);  			$_txt = preg_replace('/<.*?>/', '', $_txt);  			$_r[]= array('type'=>'txt', 'data'=>$_txt);  		}  	} 	return $_r;}