<?phpnamespace Common\Model;use Think\Model;use Think\Upload;class PictureModel extends Model{	/**	 * 自动完成	 * @var array	 */	protected $_auto = array(	);	/**	 * 文件上传	 * @param  array  $files   要上传的文件列表（通常是$_FILES数组）	 * @param  array  $setting 文件上传配置	 * @param  string $driver  上传驱动名称	 * @param  array  $config  上传驱动配置	 * @return array           文件上传成功后的信息	 */	public function upload($files, $setting, $driver = 'Local', $config = null){		/* 上传文件 */		$setting['callback'] = array($this, 'isFile');		$setting['removeTrash'] = array($this, 'removeTrash');		$Upload = new Upload($setting, $driver, $config);		$info   = $Upload->upload($files);		if($info){ //文件上传成功，记录文件信息			foreach ($info as $key => &$value) {				/* 已经存在文件记录 */				if(isset($value['id']) && is_numeric($value['id'])){					continue;				}				/* 记录文件信息 */				$value['path'] = substr($setting['rootPath'], 1).$value['savepath'].$value['savename'];	//在模板里的url路径				$img = new \Think\Image(1,substr($value['path'],1));				$value['width'] = $img->width();				$value['height'] = $img->height();				$value['status'] = 1;				$value['addtime'] = NOW_TIME;				//$id = $this->add($value);				if($this->create($value) && $id = $this->add()){					$value['id'] = $id;				} else {					//TODO: 文件上传成功，但是记录文件信息失败，需记录日志					unset($info[$key]);				}				$value['addtime_format'] = date('Y-m-d H:i:s',NOW_TIME);			}			return $info; //文件上传成功		} else {			$this->error = $Upload->getError();			return false;		}	}	/**	 * 删除图片组（status=0）	 * @param unknown_type $ids=array()	 * @return boolean	 */	public function delete($ids = array()){		$where['id'] = array('in',$ids);		$res = M('Picture')->where($where)->setField('status',0);		if(!$res){			return false;		}		return true;	}	/**	 * 删除一张图片（status=0）	 * @param unknown_type $ids=array()	 * @return boolean	 */	public function delete_one($id=0){		$where['id'] = $id;		$res = M('Picture')->where($where)->setField('status',0);		if(!$res){			return false;		}		return true;	}	/**	 * 彻底删除图片组	 * @param unknown_type $ids=array()	 * @return boolean	 */	public function absolute_delete($ids = array()){		$where['id'] = array('in',$ids);		$res = M('Picture')->where($where)->select();		foreach($res as $key=>$val){			if($val['path']){				unlink('.'.$val['path']);				$min = img_rename($val['path'],"_min");				if(file_exists('.'.$min)){					unlink('.'.$min);				}				$mid = img_rename($val['path'],"_mid");				if(file_exists('.'.$mid)){					unlink('.'.$mid);				}				M('Picture')->where('id='.$val['id'])->delete();			}		}		return true;	}	/**	 * 清空图片组	 */	public function clear(){		$where['status'] = 0;		$res = M('Picture')->where($where)->select();		foreach($res as $key=>$val){			if($val['path']){				if(!unlink(substr($val['path'],1)))				{					return false;				}				$min = img_rename($val['path'],"_min");				if(file_exists('.'.$min)){					if(!unlink('.'.$min))					{						return false;					}				}				$mid = img_rename($val['path'],"_mid");				if(file_exists('.'.$mid)){					if(!unlink('.'.$mid))					{						return false;					}				}				M('Picture')->where('id='.$val['id'])->delete();			}		}		return true;	}	/**	 * 彻底删除一张图片	 * @param unknown_type $id	 */	public function absolute_delete_one($id){		return $this->absolute_delete(array($id));	}	/**	 * 下载指定文件	 * @param  number  $root 文件存储根目录	 * @param  integer $id   文件ID	 * @param  string   $args     回调函数参数	 * @return boolean       false-下载失败，否则输出下载文件	 */	public function download($root, $id, $callback = null, $args = null){		/* 获取下载文件信息 */		$file = $this->find($id);		if(!$file){			$this->error = '不存在该文件！';			return false;		}		/* 下载文件 */		switch ($file['location']) {			case 0: //下载本地文件				$file['rootpath'] = $root;				return $this->downLocalFile($file, $callback, $args);			case 1: //TODO: 下载远程FTP文件				break;			default:				$this->error = '不支持的文件存储类型！';				return false;		}	}	/**	 * 检测当前上传的文件是否已经存在	 * @param  array   $file 文件上传数组	 * @return boolean       文件信息， false - 不存在该文件	 */	public function isFile($file){		if(empty($file['md5'])){			throw new \Exception('缺少参数:md5');		}		/* 查找文件 */		$map = array('md5' => $file['md5'],'sha1'=>$file['sha1'],'status'=>1);		return $this->field(true)->where($map)->find();	}	/**	 * 下载本地文件	 * @param  array    $file     文件信息数组	 * @param  callable $callback 下载回调函数，一般用于增加下载次数	 * @param  string   $args     回调函数参数	 * @return boolean            下载失败返回false	 */	private function downLocalFile($file, $callback = null, $args = null){		if(is_file($file['rootpath'].$file['savepath'].$file['savename'])){			/* 调用回调函数新增下载数 */			is_callable($callback) && call_user_func($callback, $args);			/* 执行下载 */ //TODO: 大文件断点续传			header("Content-Description: File Transfer");			header('Content-type: ' . $file['type']);			header('Content-Length:' . $file['size']);			if (preg_match('/MSIE/', $_SERVER['HTTP_USER_AGENT'])) { //for IE				header('Content-Disposition: attachment; filename="' . rawurlencode($file['name']) . '"');			} else {				header('Content-Disposition: attachment; filename="' . $file['name'] . '"');			}			readfile($file['rootpath'].$file['savepath'].$file['savename']);			exit;		} else {			$this->error = '文件已被删除！';			return false;		}	}	/**	 * 清除数据库存在但本地不存在的数据	 * @param $data	 */	public function removeTrash($data){        //$this->where(array('id'=>$data['id']))->delete();        //$this->absolute_delete_one($data['id']);	}}?>