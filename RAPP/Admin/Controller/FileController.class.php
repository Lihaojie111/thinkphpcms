<?phpnamespace Admin\Controller;use Admin\Controller\RootController;class FileController extends RootController{	public function index(){	}	/**	 * 文件库列表	 */	public function filelist(){		$File = M('File');		$where['status'] = 1;		$count = $File->where($where)->count();		$Page = new \Think\Page($count,24);		$show = $Page->show();		$filelist = $File->where($where)->field(true)->order('addtime desc')->limit($Page->firstRow.','.$Page->listRows)->select();		foreach($filelist as $key => &$val){			$val['size']=format_bytes($val['size']);		}		$this->assign('filelist',$filelist);		$this->assign('pages',$show);		$this->display();	}	/**	 * 上传文件	 */	public function upload(){		$config=array(			/* 文件上传相关配置 */			'file_upload' => array(				'mimes'    => '', //允许上传的文件MiMe类型				'maxSize'  => 500*1024*1024, //上传的文件大小限制 (0-不做限制)				'exts'     => 'txt,doc,wps,xls,ppt,zip,pdf,rar,flv,mp4', //允许上传的文件后缀				'autoSub'  => true, //自动子目录保存文件				'subName'  => array('date', 'Y-m-d'), //子目录创建方式，[0]-函数名，[1]-参数，多个参数使用数组				'rootPath' => './Uploads/file/', //保存根路径				'savePath' => '', //保存路径				'saveName' => array('uniqid', ''), //上传文件命名规则，[0]-函数名，[1]-参数，多个参数使用数组				'saveExt'  => '', //文件保存后缀，空则使用原后缀				'replace'  => false, //存在同名是否覆盖				'hash'     => true, //是否生成hash编码				'callback' => false, //检测文件是否存在回调函数，如果存在返回文件信息数组			), //文件上传相关配置（文件上传类配置）			'file_upload_driver'=>'local',			//本地上传文件驱动配置			'upload_local_config'=>array(),			'upload_bcs_config'=>array(				'AccessKey'=>'',				'SecretKey'=>'',				'bucket'=>'',				'rename'=>false			),			'upload_qiniu_config'=>array(				'accessKey'=>'__ODsglZwwjRJNZHAu7vtcEf-zgIxdQAY-QqVrZD',				'secrectKey'=>'Z9-RahGtXhKeTUYy9WCnLbQ98ZuZ_paiaoBjByKv',				'bucket'=>'onethinktest',				'domain'=>'onethinktest.u.qiniudn.com',				'timeout'=>3600,			)		);		/* 返回标准数据 */		$return  = array('status' => 1, 'info' => '上传成功', 'data' => '');		/* 调用文件上传组件上传文件 */		$File = D('File');		$pic_driver = $config['file_upload_driver'];		$info = $File->upload(			$_FILES,			$config['file_upload'],			$config['file_upload_driver'],			$config["upload_{$pic_driver}_config"]		);		/* 记录文件信息 */		if($info){			$return['status'] = 1;			$return = array_merge($info['Filedata'], $return);		} else {			$return['status'] = 0;			$return['info']   = $File->getError();		}		/* 返回JSON数据 */		$this->ajaxReturn($return);	}	/**	 * 文件回收站	 */	public function filelist_rubbish(){		$File = M('File');		$where['status'] = 0;		$count = $File->where($where)->count();		$Page = new \Think\Page($count,24);		$show = $Page->show();		$filelist = $File->where($where)->field(true)->order('addtime desc')->limit($Page->firstRow.','.$Page->listRows)->select();		foreach($filelist as $key => &$val){			$val['size']=format_bytes($val['size']);		}		$this->assign('filelist',$filelist);		$this->assign('pages',$show);		$this->display();	}	/**	 * 删除一个文件	 */	public function delete_one(){		if(D('File')->delete_one($_GET['id'])){			$this->success('删除成功！');		}else{			$this->error('删除出错！');		}	}	/**	 * 删除文件组	 */	public function delete(){		if(D('File')->delete($_POST['ids'])){			$this->success('删除成功！');		}else{			$this->error('删除出错！');		}	}	/**	 * 彻底删除一个文件	 */	public function absolute_delete_one(){		if(D('File')->absolute_delete_one($_GET['id'])){			$this->success('清除成功！');		}else{			$this->error('清除出错！');		}	}	/**	 * 彻底删除文件组	 */	public function absolute_delete(){		if(D('File')->absolute_delete($_POST['ids'])){			$this->success('清除成功！');		}else{			$this->error('清除出错！');		}	}	/**	 * 清空文件组	 */	public function ajax_clear(){		if(D('File')->clear()){			$this->ajaxReturn(array('status'=>1));		}else{			$this->ajaxReturn(array('status'=>0));		}	}}